#!/usr/bin/env ruby
require 'rubygems'
require 'English'
require 'trollop'
require 'nokogiri'
require 'csv'
require_relative 'freshdesk'

# Account specific configuration - use your values here.
productSolutionCategory = "5000118770" # This is the category you want your imported "Articles" & corresponding "Folders" to be created under
forumForSuggestions = "5000223489" #This is the forum you want your "Suggestions" imported into


def verbose(string_to_output)
  puts string_to_output if $verbose
end
# Translate a set of Level 1-4 to freshdesk priority ids (1 being low)
def convert_rt_priority_to_freshdesk (rt_priority)
  return 1 if rt_priority.to_i == 4
  return 2 if rt_priority.to_i == 3
  return 3 if rt_priority.to_i == 2
  return 4 if rt_priority.to_i == 1
end

opts = Trollop::options do
  version "1.0"
  banner <<-EOS
  #{File.basename($0)}
  Description: Import an exported UserVoice csv into freshdesk.
  --type: takes values ['articles','tickets','users','suggestions']

  Usage:
  #{File.basename($0)} [options]

  where [options] are:
  EOS
  opt :verbose, "Verbose output"
  opt :username , "Freshdesk username" , :type => String, :required => true
  opt :password, "Freshdesk password" , :type => String, :required => true
  opt :domain, "Freshdesk domain" , :type => String, :default => "myorg.freshdesk.com", :required => true
  opt :type, "Type of CSV export", :type => String, :required => true
  opt :csv, "csv file to read from", :type => String, :required => true

end
$verbose = opts[:verbose]
verbose "https://#{opts[:domain]}"
productSolutionFolders = Hash.new()
client = Freshdesk.new("https://#{opts[:domain]}/", opts[:username], opts[:password] )

doc = Nokogiri::XML(client.get_solution_folders("categories/#{productSolutionCategory}/folders").chomp)
doc.xpath("//solution-category//folders/solution-folder").each do | folder |
  productSolutionFolders[folder.xpath("name")[0].content] = folder.xpath("id")[0].content
end

CSV::Converters[:blank_to_nil] = lambda do |field|
  field && field.empty? ? nil : field
end
#doc = CSV.new(csv, :headers => true, :header_converters => :symbol, :converters => [:all, :blank_to_nil])
csv = CSV.parse(File.read( File.expand_path(opts[:csv]) ), :headers => true, :header_converters => :symbol)
csv.each do |row|
  entry = row.to_hash
  case opts[:type]
  when "articles"    
    if !entry[:section].empty? 
      if !productSolutionFolders.has_key?(entry[:section])
        p "Creating new Solution Folder for #{entry[:section]}"
        response = client.post_solution_folder( {:name => entry[:section], :visibility => 1},productSolutionCategory )
        doc = Nokogiri::XML(response)
        productSolutionFolders[entry[:section]] = doc.xpath("//solution-folder//id")[0].content
      end
          client.post_solution_article( {:title => entry[:question],:status => entry[:published]? 2 : 1,:description => entry[:answer_html], :folder_id => productSolutionFolders[entry[:section]]},  productSolutionCategory, productSolutionFolders[entry[:section]] )
    end
  when "tickets"
    client.post_tickets(:email => entry[:email], :name => entry[:name], :subject => entry[:subject], :description => entry[:text], :status => entry[:state] == "open" ? 2 : 5, :priority => 3, :source => 1)
  when "users"
    #Yuck! FreshDesk auto delivers an email to each user upon creation.... sigh...
    #client.post_users(:email => entry[:email], :name => entry[:name] )
  when "suggestions"
    client.post_topics(:sticky => 0, :locked => 0, :forum_id => forumForSuggestions, :title => entry[:title], :body_html => entry[:description])
  else 
    puts "Unknown type: #{opts[:type]} "
  end
end


